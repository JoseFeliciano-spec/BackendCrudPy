from abc import ABC, abstractmethod
from typing import Optional, List
from app.features.products.domain.entities.product import ProductOut, ProductCreate, ProductUpdate

class IProductRepository(ABC):
    @abstractmethod
    async def create(self, owner_id: str, data: ProductCreate) -> ProductOut: ...
    @abstractmethod
    async def get(self, owner_id: str, product_id: str) -> Optional[ProductOut]: ...
    @abstractmethod
    async def list(self, owner_id: str, skip: int = 0, limit: int = 50) -> List[ProductOut]: ...
    @abstractmethod
    async def update(self, owner_id: str, product_id: str, data: ProductUpdate) -> Optional[ProductOut]: ...
    @abstractmethod
    async def delete(self, owner_id: str, product_id: str) -> bool: ...
